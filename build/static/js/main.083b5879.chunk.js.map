{"version":3,"sources":["components/Message.js","components/ScoreBoard.js","components/Header.js","components/Game.js","components/Tile.js","App.js","serviceWorker.js","index.js"],"names":["Message","prpos","children","ScoreBoard","props","score","topScore","styles","header","display","justifyContent","backgroundColor","Header","message","style","gameStlye","flexFlow","height","width","Game","Card","margin","Image","Tile","id","className","onClick","e","src","image","alt","AppStyle","flexDirection","alignItems","App","state","tiles","tilesArray","Array","fill","guessCorrectly","handleTileClick","bind","this","setState","parseInt","console","log","arr","sort","Math","random","mixUpTiles","map","tile","key","name","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6xBAMeA,MAJf,SAAiBC,GACf,OAAO,4BAAKA,EAAMC,WCKLC,MANf,SAAoBC,GAClB,OACE,4BAAI,wCAAcA,EAAMC,MAApB,KAAkC,4CAAkBD,EAAME,YCA5DC,EAAS,CACbC,OAAQ,CACNC,QAAS,OACTC,eAAgB,gBAChBC,gBAAiB,QAuBNC,MAlBf,SAAgBR,GACZ,IACEC,EAAQD,EAAMC,MACdC,EAAWF,EAAME,SACjBO,EAAUT,EAAMS,QAEpB,OACE,yBAAKC,MAAOP,EAAOC,QACjB,oDACA,kBAAC,EAAD,KAAUK,GACV,kBAAC,EAAD,CACER,MAAOA,EACPC,SAAUA,MCrBZC,EAAS,CACbQ,UAAW,CACTN,QAAS,OACTO,SAAU,WACVN,eAAgB,SAEhBO,OAAQ,OACRC,MAAO,QAcIC,MAPf,SAAcf,GAGZ,OAAO,yBAAKU,MAAOP,EAAOQ,WAAYX,EAAMF,WCnBxCK,EAAS,CACba,KAAK,CACHF,MAAO,QACPD,OAAQ,QACRI,OAAQ,QAEVC,MAAO,CACLL,OAAQ,QACRC,MAAO,UAmBIK,MAff,SAAcnB,GACZ,IAAMoB,EAAKpB,EAAMoB,GAEjB,OACI,yBACEC,UAAU,OACVX,MAAOP,EAAOa,KACdM,QAAS,SAACC,GAAD,OAAOvB,EAAMsB,QAAQF,EAAIG,KAClC,yBAAKC,IAAKxB,EAAMyB,MAAOf,MAAOP,EAAOe,MAAOQ,IAAK1B,EAAMoB,O,OCdzDjB,G,MAAS,CACbwB,SAAU,CACRtB,QAAS,OACTuB,cAAe,SACfC,WAAY,YAqFDC,E,YAhFb,WAAY9B,GAAQ,IAAD,8BACjB,4CAAMA,KACD+B,MAAQ,CACXC,QACAC,WAAY,IAAIC,MAAM,IAAIC,MAAK,GAC/BlC,MAAO,IACPC,SAAU,IACVkC,gBAAgB,EAChB3B,QAAS,4BAEX,EAAK4B,gBAAkB,EAAKA,gBAAgBC,KAArB,gBAVN,E,6EAaHlB,EAAIG,GAElB,IAAMd,EAAU8B,KAAKR,MAAME,WAAWb,GAClC,2BACA,wBAEJ,IAAkC,IAA9BmB,KAAKR,MAAME,WAAWb,GAAe,CACvC,IAAMa,EAAaM,KAAKR,MAAME,WAC9BA,EAAWb,IAAM,EAGjBmB,KAAKC,UAAS,SAAAT,GAAK,MAAK,CACtB9B,MAAOwC,SAASV,EAAM9B,OAAS,EAC/BC,SACEuC,SAASV,EAAM7B,UAAYuC,SAASV,EAAM9B,OACtCwC,SAASV,EAAM7B,UACfuC,SAASV,EAAM7B,UAAY,EACjCO,UACAwB,iBAEFS,QAAQC,IAAIvB,OACP,CACL,IAAMa,EAAa,IAAIC,MAAM,IAAIC,MAAK,GAGtCI,KAAKC,UAAS,SAAAT,GAAK,MAAK,CACtB9B,MAAO,IACPC,SAAU6B,EAAM7B,SAChBO,UACAwB,oB,iCAOKW,GAET,OAAOA,EAAIC,MAAK,kBAAMC,KAAKC,SAAW,Q,+BAG9B,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CACE9C,MAAOsC,KAAKR,MAAM9B,MAClBC,SAAUqC,KAAKR,MAAM7B,SACrBO,QAAS8B,KAAKR,MAAMtB,UAEtB,yBAAKC,MAAOP,EAAOwB,UACjB,kBAAC,EAAD,KACGY,KAAKS,WAAWT,KAAKR,MAAMC,OAAOiB,KAAI,SAAAC,GAAI,OACzC,kBAAC,EAAD,CACE5B,QAAS,EAAKe,gBACdc,IAAKD,EAAK9B,GACVA,GAAI8B,EAAK9B,GACTgC,KAAMF,EAAK9B,GACXK,MAAOyB,EAAKzB,kB,GAvEV4B,IAAMC,WCJJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.083b5879.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Message(prpos) {\n  return <h1>{prpos.children}</h1>\n}\n\nexport default Message;","import React from 'react';\n\nfunction ScoreBoard(props) {\n  return(\n    <h1><span>Score: {props.score} </span><span>Top Score: {props.topScore}</span></h1>\n  )\n}\n\nexport default ScoreBoard;","import React from \"react\";\nimport Message from './Message';\nimport ScoreBoard from './ScoreBoard';\n\nconst styles = {\n  header: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    backgroundColor: 'red'\n  }\n}\n\n\nfunction Header(props) {\n    const \n      score = props.score,\n      topScore = props.topScore,\n      message = props.message\n\n  return (\n    <div style={styles.header}>\n      <h1>Click Me Remember Me</h1>\n      <Message>{message}</Message>\n      <ScoreBoard \n        score={score}\n        topScore={topScore}/>\n    </div>\n  \n  )\n}\n\nexport default Header;\n","import React from \"react\";\n\n\n\nconst styles = {\n  gameStlye: {\n    display: 'flex',\n    flexFlow: 'row wrap',\n    justifyContent: 'center',\n\n    height: '100%',\n    width: '75%'\n\n  }\n\n}\n\n\nfunction Game(props) {\n\n   \n  return <div style={styles.gameStlye}>{props.children}</div>;\n\n}\n\nexport default Game;\n","import React from 'react';\n\nconst styles = {\n  Card:{\n    width: '250px',\n    height: '250px',\n    margin: '20px'\n  },\n  Image: {\n    height: '250px',\n    width: '250px'\n  }\n}\n\nfunction Tile(props) {\n  const id = props.id;\n\n  return (\n      <div \n        className=\"card\" \n        style={styles.Card}\n        onClick={(e) => props.onClick(id, e)}>\n        <img src={props.image} style={styles.Image} alt={props.id} />\n      </div>\n \n  )\n    \n}\n\nexport default Tile;","import React from \"react\";\nimport Header from \"./components/Header\";\nimport Game from \"./components/Game\";\nimport Tile from \"./components/Tile\";\nimport tiles from \"./tiles\";\n\nimport \"./App.css\";\n\nconst styles = {\n  AppStyle: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  }\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tiles,\n      tilesArray: new Array(12).fill(false),\n      score: \"0\",\n      topScore: \"0\",\n      guessCorrectly: true,\n      message: \"Click a Skyline to Begin\"\n    };\n    this.handleTileClick = this.handleTileClick.bind(this);\n  }\n\n  handleTileClick(id, e) {\n    //Output message\n    const message = this.state.tilesArray[id]\n      ? \" You Guessed Incorrectly\"\n      : \"You Guessed Correctly\";\n\n    if (this.state.tilesArray[id] === false) {\n      const tilesArray = this.state.tilesArray;\n      tilesArray[id] = true;\n\n      //change score and topScore\n      this.setState(state => ({\n        score: parseInt(state.score) + 1,\n        topScore:\n          parseInt(state.topScore) > parseInt(state.score)\n            ? parseInt(state.topScore)\n            : parseInt(state.topScore) + 1,\n        message,\n        tilesArray\n      }));\n      console.log(id);\n    } else {\n      const tilesArray = new Array(12).fill(false);\n\n      //change score\n      this.setState(state => ({\n        score: \"0\",\n        topScore: state.topScore,\n        message,\n        tilesArray\n      }));\n    }\n\n    //calll mixUpTitles\n  }\n\n  mixUpTiles(arr) {\n    //mix up tiles\n    return arr.sort(() => Math.random() - 0.5);\n  }\n\n  render() {\n    return (\n      <div>\n        <Header\n          score={this.state.score}\n          topScore={this.state.topScore}\n          message={this.state.message}\n        />\n        <div style={styles.AppStyle}>\n          <Game>\n            {this.mixUpTiles(this.state.tiles).map(tile => (\n              <Tile\n                onClick={this.handleTileClick}\n                key={tile.id}\n                id={tile.id}\n                name={tile.id}\n                image={tile.image}\n              />\n            ))}\n          </Game>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}